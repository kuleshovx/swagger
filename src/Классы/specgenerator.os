// Полное описание спецификации тут:
// https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md

#Использовать json

Перем ОписаниеСевриса;
Перем ОбъектДанных;
Перем ТэгиШаблонов;
Перем ОписаниеТипов;
Перем СтрокаОпределенияМассива;

// Инициализация объекта класса
//
// Параметры:
//  ВнутреннееОписаниеСервиса - Структура - внутреннее описание сервиса от metadataparser.os
//
Процедура ПриСозданииОбъекта(ВнутреннееОписаниеСервиса)

	ОписаниеСевриса = ВнутреннееОписаниеСервиса;

	ОбъектДанных = НовыйБазовыйОбъект();

	ТэгиШаблонов = Новый Массив;

	ОписаниеТипов = Новый Соответствие;

	СтрокаОпределенияМассива = "Массив из ";

КонецПроцедуры

#Область ПрограммныйИнтерфейс

// Интерпретирует описание сервиса конфигурации 1С
// в метаданные спецификации "Swagger 2.0"
//
Процедура ПрочитатьОписаниеСервиса() Экспорт

	// заполняем корневые свойства
	ОбъектДанных.host = ОписаниеСевриса.Хост;
	ОбъектДанных.basePath =  ?(
		ЗначениеЗаполнено(ОписаниеСевриса.База1С),
		СтрШаблон("/%1/hs%2", ОписаниеСевриса.База1С, ОписаниеСевриса.КорневойURL),
		ОписаниеСевриса.КорневойURL
	);

	// заполняем info
	ОбъектДанных.info = НовыйБлокИнфо();

	ОбъектДанных.info.title = ОписаниеСевриса.Имя;
	ОбъектДанных.info.description = ОписаниеСевриса.Описание;
	ОбъектДанных.info.version = ОписаниеСевриса.Версия;

	// заполняем paths
	Для Каждого ШаблонURL Из ОписаниеСевриса.ШаблоныURL Цикл
		ПрочитатьШаблонURL(ШаблонURL);
	КонецЦикла;

	// заполняем tags
	Для Каждого ИмяТэга Из ТэгиШаблонов Цикл
		
		Тэг = НовыйБлокТэга();
		
		Тэг.name = ИмяТэга;
		Тэг.description = "";

		ОбъектДанных.tags.Добавить(Тэг);
		
	КонецЦикла;

	// заполняем definitions
	ОбъектДанных.definitions = ОписаниеТипов;
	
КонецПроцедуры

// Сохраняет спецификацию в файл
//
// Параметры:
//  ПутьВыгрузки - Строка - каталог для сохранения файла спецификации
//  Формат - Строка - пока только умеет в json
//
Процедура СохранитьСпецификацию(ПутьВыгрузки, Формат = "json") Экспорт

	Если Формат = "json" Тогда
		
		ПарсерJSON = Новый ПарсерJSON();

		Текст = ПарсерJSON.ЗаписатьJSON(ОбъектДанных);

		ИмяФайла = ОбъектДанных.info.title + ".json";

		ПолныйПутьКФайлу = ОбъединитьПути(ПутьВыгрузки, ИмяФайла);

		ЗаписьТекста = Новый ЗаписьТекста(ПолныйПутьКФайлу);

		ЗаписьТекста.Записать(Текст);

	Иначе

		Сообщить("Неизвестный формат!");

	КонецЕсли;

КонецПроцедуры

// Получает спецификацию в виде строки
//
// Параметры:
//  ПутьВыгрузки - Строка - каталог для сохранения файла спецификации
//  Формат - Строка - пока только умеет в json
//
// Возвращаемое значение:
//   Строка   - спецификация
//
Функция ПолучитьСпецификацию(Формат = "json") Экспорт

	Результат = Неопределено;

	Если Формат = "json" Тогда
		
		ПарсерJSON = Новый ПарсерJSON();

		Результат = ПарсерJSON.ЗаписатьJSON(ОбъектДанных);

	Иначе

		Сообщить("Неизвестный формат!");

	КонецЕсли;

	Возврат Результат;

КонецФункции

#КонецОбласти

#Область ЧтениеВнутреннихОписаний

Процедура ПрочитатьШаблонURL(ШаблонURL)

	ПоддерживаемыеМетоды = ПоддерживаемыеМетодыСпецификации();

	// проверим тэг
	Если ТэгиШаблонов.Найти(ШаблонURL.Тэг) = Неопределено Тогда
		ТэгиШаблонов.Добавить(ШаблонURL.Тэг);
	КонецЕсли;

	// заполняем path
	ДанныеПути = Новый Структура;

	Для Каждого МетодШаблона Из ШаблонURL.Методы Цикл
		
		ЕстьПараметрыВПути = (ШаблонURL.ПараметрыВПути <> Неопределено);

		// заполняем operation object
		Метод = НовыйБлокМетода();

		Метод.tags.Добавить(ШаблонURL.Тэг);
		Метод.summary = МетодШаблона.Резюме;
		Метод.description = МетодШаблона.Описание;

		// опишем параметры
		Если МетодШаблона.ВходящиеПараметры <> Неопределено Тогда
			
			Для Каждого ОписаниеПараметра Из МетодШаблона.ВходящиеПараметры Цикл

				ПараметрМетода = НовыйБлокПараметраМетода();

				ПараметрМетода.name = ОписаниеПараметра.Имя;
				ПараметрМетода.description = ОписаниеПараметра.Описание;

				ТипДанныхПараметра = ПривестиКТипу(ОписаниеПараметра.Тип);

				Если НРег(ОписаниеПараметра.Имя) = "body" Тогда

					ПараметрМетода.in = "body";
					ПараметрМетода.required = Истина;

					Если ТипДанныхПараметра.type <> "array" Тогда
						ПараметрМетода.schema = НовыйУказательНаТип(ТипДанныхПараметра.type);
					Иначе
						ПараметрМетода.schema = НовыйУказательНаТип(ТипДанныхПараметра.items.type, Истина);
					КонецЕсли;

				ИначеЕсли ЕстьПараметрыВПути И ШаблонURL.ПараметрыВПути.Найти(ОписаниеПараметра.Имя) <> Неопределено Тогда
					
					ПараметрМетода.in = "path";
					ПараметрМетода.required = Истина;
					ЗаполнитьЗначенияСвойств(ПараметрМетода, ТипДанныхПараметра);
					
				Иначе
					
					ПараметрМетода.in = "query";
					ПараметрМетода.required = ОписаниеПараметра.Обязательный;
					ЗаполнитьЗначенияСвойств(ПараметрМетода, ТипДанныхПараметра);

				КонецЕсли;

				Если ЗначениеЗаполнено(ОписаниеПараметра.ВозможныеЗначения) Тогда
					
					Если ТипДанныхПараметра.type <> "array" Тогда
						ПараметрМетода.Вставить("enum", Новый Массив);
						ПеречислениеЗначений = ПараметрМетода.enum;
					Иначе
						ПараметрМетода.items.Вставить("enum", Новый Массив);
						ПеречислениеЗначений = ПараметрМетода.items.enum;
					КонецЕсли;

					Для Каждого ОписаниеВозможногоЗначения Из ОписаниеПараметра.ВозможныеЗначения Цикл
						ПеречислениеЗначений.Добавить(ОписаниеВозможногоЗначения.Значение);
					КонецЦикла;
					
				КонецЕсли;

				Если НЕ ЗначениеЗаполнено(ПараметрМетода.type) Тогда
					ПараметрМетода.Удалить("type");
				КонецЕсли;

				Если НЕ ЗначениеЗаполнено(ПараметрМетода.format) Тогда
					ПараметрМетода.Удалить("format");
				КонецЕсли;

				Если НЕ ЗначениеЗаполнено(ПараметрМетода.schema) Тогда
					ПараметрМетода.Удалить("schema");
				КонецЕсли;

				Если НЕ ЗначениеЗаполнено(ПараметрМетода.items) Тогда
					ПараметрМетода.Удалить("items");
				КонецЕсли;

				СгенерироватьОписаниеТипов(ОписаниеПараметра);

				Метод.parameters.Добавить(ПараметрМетода);

			КонецЦикла;

		ИначеЕсли ШаблонURL.ПараметрыВПути <> Неопределено Тогда

			Для Каждого ИмяПараметра Из ШаблонURL.ПараметрыВПути Цикл

				ПараметрМетода = НовыйБлокПараметраМетода();

				ПараметрМетода.name = ИмяПараметра;
				ПараметрМетода.in = "path";
				ПараметрМетода.required = Истина;

				Метод.parameters.Добавить(ПараметрМетода);

			КонецЦикла;

		Иначе
			Метод.parameters = Новый Массив;
		КонецЕсли;

		// опишем варианты вызова
		Если МетодШаблона.ВариантыВызова <> Неопределено Тогда
			
			Для Каждого ОписаниеВарианта Из МетодШаблона.ВариантыВызова Цикл
				Метод.consumes.Добавить(ОписаниеВарианта);
			КонецЦикла;

		КонецЕсли;

		// опишем варианты ответа
		Если МетодШаблона.ВариантыОтвета <> Неопределено Тогда
			
			Для Каждого ОписаниеВарианта Из МетодШаблона.ВариантыОтвета Цикл
				Метод.produces.Добавить(ОписаниеВарианта);
			КонецЦикла;

		КонецЕсли;
		
		// опишем возвращаемое значение
		Если МетодШаблона.ВозвращаемоеЗначение <> Неопределено Тогда
			// TODO:
		КонецЕсли;

		// опишем коды ответов
		Если МетодШаблона.КодыОтветов = Неопределено Тогда
			
			// ответ всегда 200...
			ОтветЗапроса = НовыйБлокОтвета();
			ОтветЗапроса.description = "successful operation";
			ОтветЗапроса.Удалить("schema");
			Метод.responses.Вставить("200", ОтветЗапроса);
			
		Иначе

			Для Каждого КодОтвета Из МетодШаблона.КодыОтветов Цикл

				ОтветЗапроса = НовыйБлокОтвета();
				ОтветЗапроса.description = КодОтвета.Описание;

				Если ЗначениеЗаполнено(КодОтвета.Тип) Тогда
					
					ТипДанныхПараметра = ПривестиКТипу(КодОтвета.Тип);

					Если ТипДанныхПараметра.type <> "array" Тогда
						ОтветЗапроса.schema = НовыйУказательНаТип(ТипДанныхПараметра.type);
					Иначе
						ОтветЗапроса.schema = НовыйУказательНаТип(ТипДанныхПараметра.items.type, Истина);
					КонецЕсли;

					СгенерироватьОписаниеТипов(КодОтвета);

				КонецЕсли;

				Если НЕ ЗначениеЗаполнено(ОтветЗапроса.schema) Тогда
					ОтветЗапроса.Удалить("schema");
				КонецЕсли;
				
				Метод.responses.Вставить(КодОтвета.Код, ОтветЗапроса);

			КонецЦикла;

		КонецЕсли;
		
		// 
		ТекущийМетод = НРег(МетодШаблона.Метод);
		
		Если ТекущийМетод = "any" Тогда
			
			// если в конфигурации выбран метод "Любой"
			// то клонируем его на все поддерживаемые в спецификации
			Для Каждого ПоддерживаемыйМетод Из ПоддерживаемыеМетоды Цикл
				ДанныеПути.Вставить(ПоддерживаемыйМетод, Метод);
			КонецЦикла;
			
		Иначе
			ДанныеПути.Вставить(ТекущийМетод, Метод);
		КонецЕсли;
		
	КонецЦикла;

	ОбъектДанных.paths.Вставить(ШаблонURL.Путь, ДанныеПути);

КонецПроцедуры

Процедура СгенерироватьОписаниеТипов(ОписаниеПараметра)
	
	Если ЗначениеЗаполнено(ОписаниеПараметра.СоставнойТип) Тогда
					
		ОпределениеСоставногоТипа = НовыйБлокОпределений();
		ОпределениеСоставногоТипа.type = "object";
		ОпределениеСоставногоТипа.properties = Новый Соответствие;

		Для Каждого ВложенныйПараметр Из ОписаниеПараметра.СоставнойТип Цикл

			ТипДанныхПараметра = ПривестиКТипу(ВложенныйПараметр.Тип);
			
			Если ВложенныйПараметр.СоставнойТип = Неопределено Тогда
			
				СвойствоТипа = НовыйБлокСвойстваТипа();
				ЗаполнитьЗначенияСвойств(СвойствоТипа, ТипДанныхПараметра);
				СвойствоТипа.description = ВложенныйПараметр.Описание;

				Если ЗначениеЗаполнено(ВложенныйПараметр.ВозможныеЗначения) Тогда
					
					Если ТипДанныхПараметра.type <> "array" Тогда
						СвойствоТипа.Вставить("enum", Новый Массив);
						ПеречислениеЗначений = СвойствоТипа.enum;
					Иначе
						СвойствоТипа.items.Вставить("enum", Новый Массив);
						ПеречислениеЗначений = СвойствоТипа.items.enum;
					КонецЕсли;

					Для Каждого ОписаниеВозможногоЗначения Из ВложенныйПараметр.ВозможныеЗначения Цикл
						ПеречислениеЗначений.Добавить(ОписаниеВозможногоЗначения.Значение);
					КонецЦикла;
					
				КонецЕсли;

				Если НЕ ЗначениеЗаполнено(СвойствоТипа.type) Тогда
					СвойствоТипа.Удалить("type");
				КонецЕсли;

				Если НЕ ЗначениеЗаполнено(СвойствоТипа.format) Тогда
					СвойствоТипа.Удалить("format");
				КонецЕсли;

				Если НЕ ЗначениеЗаполнено(СвойствоТипа.items) Тогда
					СвойствоТипа.Удалить("items");
				КонецЕсли;

				ОпределениеСоставногоТипа.properties.Вставить(ВложенныйПараметр.Имя, СвойствоТипа);

			Иначе

				СгенерироватьОписаниеТипов(ВложенныйПараметр);

				Если ТипДанныхПараметра.type <> "array" Тогда
					ОпределениеСоставногоТипа.properties.Вставить(ВложенныйПараметр.Имя, НовыйУказательНаТип(ТипДанныхПараметра.type));
				Иначе
					ОпределениеСоставногоТипа.properties.Вставить(ВложенныйПараметр.Имя, НовыйУказательНаТип(ТипДанныхПараметра.items.type, Истина));
				КонецЕсли;

			КонецЕсли;

		КонецЦикла;
		
		ОписаниеТипов.Вставить(СтрЗаменить(ОписаниеПараметра.Тип, СтрокаОпределенияМассива, ""), ОпределениеСоставногоТипа);

	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОписаниеМетаданных

// Описывает базовую стуктуру данных
//
// Возвращаемое значение:
//   Структура   - структура данных
//
Функция НовыйБазовыйОбъект()

	Результат = Новый Структура;

	Результат.Вставить("swagger", "2.0");
	Результат.Вставить("info");
	Результат.Вставить("host");
	Результат.Вставить("basePath");
	Результат.Вставить("tags", Новый Массив);
	Результат.Вставить("schemes", Новый Массив);
	Результат.Вставить("paths", Новый Соответствие);
	//Результат.Вставить("securityDefinitions");
	Результат.Вставить("definitions");
	Результат.Вставить("externalDocs", Новый Соответствие);

	Результат["externalDocs"].Вставить("description", "Find out more about Swagger");
	Результат["externalDocs"].Вставить("url", "http://swagger.io");
	Результат["schemes"].Добавить("http");
	Результат["schemes"].Добавить("https");
	Возврат Результат;
	
КонецФункции

// Описывает блок общей информации
//
// Возвращаемое значение:
//   Структура   - структура данных
//
Функция НовыйБлокИнфо()

	Результат = Новый Структура;

	Результат.Вставить("description");
	Результат.Вставить("version");
	Результат.Вставить("title");
	Результат.Вставить("termsOfService");
	//Результат.Вставить("contact");
	//Результат.Вставить("license");

	Возврат Результат;
	
КонецФункции

// Описывает блок контактов разработчиков
//
// Возвращаемое значение:
//   Структура   - структура данных
//
Функция НовыйБлокКонтактов()

	Результат = Новый Структура;

	Результат.Вставить("email");

	Возврат Результат;
	
КонецФункции

// Описывает блок лицензии
//
// Возвращаемое значение:
//   Структура   - структура данных
//
Функция НовыйБлокЛицензии()

	Результат = Новый Структура;

	Результат.Вставить("name");
	Результат.Вставить("url");

	Возврат Результат;
	
КонецФункции

// Описывает блок данных тэга
//
// Возвращаемое значение:
//   Структура   - структура данных
//
Функция НовыйБлокТэга()

	Результат = Новый Структура;

	Результат.Вставить("name");
	Результат.Вставить("description");
	//Результат.Вставить("externalDocs");

	Возврат Результат;
	
КонецФункции

// Описывает блок метода сервиса
//
// Возвращаемое значение:
//   Структура   - структура данных
//
Функция НовыйБлокМетода()

	Результат = Новый Структура;

	Результат.Вставить("tags", Новый Массив);
	Результат.Вставить("summary");
	Результат.Вставить("description");
	//Результат.Вставить("operationId");
	Результат.Вставить("consumes", Новый Массив);
	Результат.Вставить("produces", Новый Массив);
	Результат.Вставить("parameters", Новый Массив);
	Результат.Вставить("responses", Новый Соответствие);
	//Результат.Вставить("security");

	Возврат Результат;
	
КонецФункции

// Описывает блок параметра метода сервиса
//
// Возвращаемое значение:
//   Структура   - структура данных
//
Функция НовыйБлокПараметраМетода()

	Результат = Новый Структура;

	Результат.Вставить("name");
	Результат.Вставить("in");
	Результат.Вставить("description");
	Результат.Вставить("required");
	Результат.Вставить("type");
	Результат.Вставить("format");
	Результат.Вставить("schema");
	Результат.Вставить("items");

	Возврат Результат;
	
КонецФункции

// Описывает блок ссылки на документацию
//
// Возвращаемое значение:
//   Структура   - структура данных
//
Функция НовыйБлокСсылкиНаДокументацию()

	Результат = Новый Структура;

	Результат.Вставить("description");
	Результат.Вставить("url");

	Возврат Результат;
	
КонецФункции

// Описывает блок определений
//
// Возвращаемое значение:
//   Структура   - структура данных
//
Функция НовыйБлокОпределений()

	Результат = Новый Структура;

	Результат.Вставить("type");
	Результат.Вставить("properties");

	Возврат Результат;
	
КонецФункции

// Описывает блок свойства типа
//
// Возвращаемое значение:
//   Структура   - структура данных
//
Функция НовыйБлокСвойстваТипа()
	
	Результат = Новый Структура;

	Результат.Вставить("type");
	Результат.Вставить("format");
	Результат.Вставить("description");
	Результат.Вставить("items");

	Возврат Результат;

КонецФункции

// Описывает блок ответа
//
// Возвращаемое значение:
//   Структура   - структура данных
//
Функция НовыйБлокОтвета()
	
	Результат = Новый Структура;

	Результат.Вставить("description");
	Результат.Вставить("schema");

	Возврат Результат;

КонецФункции

// Описывает указатель на тип
//
// Параметры:
//  Тип - Строка - тип данных
//  ЭтоМассив - Булево - признак массива
//
// Возвращаемое значение:
//   Соответствие   - указатель
//
Функция НовыйУказательНаТип(Тип, ЭтоМассив = Ложь)
	
	Результат = Новый Соответствие;

	Если ЭтоМассив Тогда
		ОписаниеМассива = Новый Соответствие;
		ОписаниеМассива.Вставить("$ref", СтрШаблон("#/definitions/%1", Тип));
		Результат.Вставить("items", ОписаниеМассива);
		Результат.Вставить("type", "array");
	Иначе
		Результат.Вставить("$ref", СтрШаблон("#/definitions/%1", Тип));
	КонецЕсли;

	Возврат Результат;

КонецФункции

#КонецОбласти

#Область ПрочиеМетоды

Функция ПривестиКТипу(Знач Текст)

	Результат = Новый Структура("type, format, items");

	Если СтрНачинаетсяС(Текст, СтрокаОпределенияМассива) Тогда
		Результат.type = "array";
		Результат.items = Новый Структура("type, format");
		ТипФормат = Результат.items;
		Текст = СтрЗаменить(Текст, СтрокаОпределенияМассива, "");
	Иначе
		ТипФормат = Результат;
	КонецЕсли;

	Ключ = НРег(Текст);

	Если Ключ = "строка" Тогда
		ТипФормат.type = "string";
	ИначеЕсли Ключ = "число" Тогда
		ТипФормат.type = "number";
	ИначеЕсли Ключ = "булево" Тогда
		ТипФормат.type = "boolean";
	ИначеЕсли Ключ = "файл" Тогда
		ТипФормат.type = "file";
	ИначеЕсли Ключ = "дата" Тогда
		ТипФормат.type = "string";
		ТипФормат.format = "date";
	ИначеЕсли Ключ = "датавремя" Тогда
		ТипФормат.type = "string";
		ТипФормат.format = "date-time";
	Иначе
		ТипФормат.type = Текст;
	КонецЕсли;

	Возврат Результат;

КонецФункции

Функция ПривестиКФормату(Текст)

	Ключ = НРег(Текст);

	Если Ключ = "строка" Тогда
		Возврат "string";
	ИначеЕсли Ключ = "число" Тогда
		Возврат "number";
	ИначеЕсли Ключ = "булево" Тогда
		Возврат "boolean";
	ИначеЕсли Ключ = "массив" Тогда
		Возврат "array";
	ИначеЕсли Ключ = "файл" Тогда
		Возврат "file";
	Иначе
		Возврат "";
	КонецЕсли;

КонецФункции

Функция ПоддерживаемыеМетодыСпецификации()

	Результат = Новый Массив;
	
	Результат.Добавить("get");
	Результат.Добавить("post");
	Результат.Добавить("put");
	Результат.Добавить("patch");
	Результат.Добавить("delete");
	Результат.Добавить("head");
	Результат.Добавить("trace");
	
	Возврат Результат;

КонецФункции

#КонецОбласти